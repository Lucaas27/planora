name: Release & Deploy

on:
  push:
    branches: [main]

env:
  DOTNET_VERSION: "9.x"

# Prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-prerequisites:
    name: Check Prerequisites
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit message
        id: check
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit message: $COMMIT_MSG"

          # Skip if commit message contains skip patterns or is from release bot
          if echo "$COMMIT_MSG" | grep -qiE '\[skip ci\]|\[ci skip\]|chore\(release\):'; then
            echo "Skipping deployment due to commit message"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

  release:
    name: Semantic Release
    needs: check-prerequisites
    runs-on: ubuntu-latest
    if: needs.check-prerequisites.outputs.should_deploy == 'true'
    outputs:
      version: ${{ steps.get_tag.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic_release.outputs.new_release_published }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Run semantic-release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic_release
        with:
          working_directory: .
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Get latest tag
        id: get_tag
        run: |
          VERSION=$(git describe --tags --abbrev=0 --match "v*" | sed 's/v//' || echo "1.0.0")
          echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
          echo "new_release_version=$VERSION"

      - name: Set summary
        if: ${{ steps.semantic_release.outputs.new_release_published == 'true' }}
        run: |
          echo "## Application Release" >> $GITHUB_STEP_SUMMARY
          echo "✅ New version published: ${{ steps.semantic_release.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.semantic_release.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY

  docker-backend:
    name: Build Backend Docker Image
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_IMAGE_NAME: planora-api
      DOCKER_REGISTRY: ghcr.io
      RELEASE_VERSION: ${{ needs.release.outputs.version || '1.0.0' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set registry owner
        id: registry
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/planora.API/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ steps.registry.outputs.owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ steps.registry.outputs.owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

  docker-frontend:
    name: Build Frontend Docker Image
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      FRONTEND_IMAGE_NAME: planora-frontend
      DOCKER_REGISTRY: ghcr.io
      RELEASE_VERSION: ${{ needs.release.outputs.version || '1.0.0' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set registry owner
        id: registry
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./client/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ steps.registry.outputs.owner }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ steps.registry.outputs.owner }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

  deploy:
    name: Deploy to Coolify
    needs: [docker-backend, docker-frontend, release]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger backend deployment
        run: |
          echo "Deploying version ${{ needs.release.outputs.version }}"
          curl -X POST "${{ secrets.COOLIFY_WEBHOOK_URL_BACKEND }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_API_TOKEN }}"

      - name: Trigger frontend deployment
        run: |
          echo "Deploying version ${{ needs.release.outputs.version }}"
          curl -X POST "${{ secrets.COOLIFY_WEBHOOK_URL_FRONTEND }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_API_TOKEN }}"

      - name: Set deploy summary
        run: |
          echo "## Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed version ${{ needs.release.outputs.version }} to Coolify" >> $GITHUB_STEP_SUMMARY
          echo "Deployment time: $(date)" >> $GITHUB_STEP_SUMMARY
